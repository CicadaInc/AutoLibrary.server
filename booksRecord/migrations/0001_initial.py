# Generated by Django 2.2.1 on 2019-06-14 16:16

import booksRecord.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('readersRecord', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('second_name', models.CharField(help_text='Фамилия кириллицей', max_length=25, verbose_name='фамилия')),
                ('first_name', models.CharField(help_text='Имя кириллицей', max_length=25, verbose_name='имя')),
                ('middle_name', models.CharField(blank=True, help_text='Отчество кириллицей, необязательно', max_length=25, verbose_name='отчество')),
            ],
            options={
                'verbose_name': 'автор',
                'verbose_name_plural': 'авторы',
                'ordering': ['second_name', 'first_name', 'middle_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('isbn', models.BigIntegerField(help_text='ISBN код книги, указанный на штрих-коде сзади, уникален для каждого издания', primary_key=True, serialize=False, unique=True, validators=[booksRecord.validators.ean13_validator], verbose_name='ISBN код')),
                ('name', models.CharField(help_text='Официальное название книги', max_length=65, verbose_name='название')),
                ('year_of_publication', models.SmallIntegerField(verbose_name='год издания')),
                ('edition', models.SmallIntegerField(verbose_name='номер издания')),
                ('publication_city', models.CharField(help_text='город издания книги, без "г. "', max_length=30, verbose_name='город издания')),
                ('grade', models.CharField(blank=True, help_text='Для учебных книг. Может быть диапазоном, к примеру: «Физика. Задачник. 7-9 класс»', max_length=5, validators=[booksRecord.validators.grade_validator], verbose_name='класс')),
                ('inventory_number', models.PositiveSmallIntegerField(help_text='инвентарный номер из Книги Учёта', verbose_name='инвентарный номер')),
            ],
            options={
                'verbose_name': 'книга',
                'verbose_name_plural': 'книги',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BookInstance',
            fields=[
                ('id', models.PositiveIntegerField(help_text='идентификатор книги, уникальный для каждого экземпляра; совпадает с номером штрихкода на наклейке', primary_key=True, serialize=False, unique=True, verbose_name='индивидуальный идентификатор')),
            ],
            options={
                'verbose_name': 'экземпляр книги',
                'verbose_name_plural': 'экземпляры книг',
                'ordering': ['book'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Официальное наименование \nиздательства, без слов "Издательство", "ООО", "ПАО" и т. п.', max_length=65, unique=True, verbose_name='наименование')),
            ],
            options={
                'verbose_name': 'издательство',
                'verbose_name_plural': 'издательства',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='название')),
            ],
            options={
                'verbose_name': 'предмет',
                'verbose_name_plural': 'предметы',
            },
        ),
        migrations.CreateModel(
            name='TakenBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время взятия')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booksRecord.Book', verbose_name='книга')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='readersRecord.Student', verbose_name='ученик')),
            ],
        ),
        migrations.AddIndex(
            model_name='subject',
            index=models.Index(fields=['name'], name='booksRecord_name_6577b9_idx'),
        ),
        migrations.AddIndex(
            model_name='publisher',
            index=models.Index(fields=['name'], name='booksRecord_name_84ea29_idx'),
        ),
        migrations.AddField(
            model_name='bookinstance',
            name='book',
            field=models.ForeignKey(help_text='ссылка на модель Книга :Model:`booksRecord.Book`', on_delete=django.db.models.deletion.CASCADE, to='booksRecord.Book', verbose_name='книга'),
        ),
        migrations.AddField(
            model_name='book',
            name='authors',
            field=models.ManyToManyField(help_text='Автор или авторы книги, ссылается на :Model:`booksRecord.Author`', to='booksRecord.Author', verbose_name='автор(-ы)'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.PROTECT, to='booksRecord.Publisher', verbose_name='издательство'),
        ),
        migrations.AddField(
            model_name='book',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booksRecord.Subject', verbose_name='предмет'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['second_name', 'first_name'], name='booksRecord_second__450692_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['name'], name='booksRecord_name_437698_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['inventory_number'], name='booksRecord_invento_8394ea_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['grade', 'subject'], name='booksRecord_grade_5f3938_idx'),
        ),
    ]
